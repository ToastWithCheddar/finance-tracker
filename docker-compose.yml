services:
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - finance-network

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - finance-network

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    restart: unless-stopped
    volumes:
      - ./backend:/app:cached
      - ./ml_models:/app/ml_models:cached
    ports:
      - "8000:8000"
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - finance-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: dev
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./frontend:/app:cached
      - frontend_node_modules:/app/node_modules
    ports:
      - "3000:3000"
      - "3001:3001"
    command: npm run dev
    depends_on:
      - backend
    networks:
      - finance-network

  ml-worker:
    build:
      context: ./ml-worker
      dockerfile: Dockerfile
    env_file:
      - .env
    restart: unless-stopped
    volumes:
      - ./ml-worker:/app:cached
      - ./ml_models:/app/models:cached
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - finance-network
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - finance-network

volumes:
  postgres_data:
  redis_data:
  frontend_node_modules:

networks:
  finance-network:
    driver: bridge