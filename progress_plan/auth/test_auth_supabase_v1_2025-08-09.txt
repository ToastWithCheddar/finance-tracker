# Supabase-Only Authentication Test Cases
# Version: 1.0
# Date: 2025-08-09
# Purpose: Comprehensive testing strategy for migrating to Supabase-only authentication

## Test Environment Setup
- Backend: FastAPI + Supabase client
- Frontend: React + Zustand
- Database: PostgreSQL with User model
- Auth Provider: Supabase (email/password only)

## Test Tree Structure

### 1. REGISTRATION FLOW TEST
Registration Start
├── Valid Email & Password
│   ├── SUCCESS: User created in Supabase
│   │   ├── SUCCESS: Local user created in DB
│   │   │   ├── SUCCESS: Confirmation email sent
│   │   │   │   └── RESULT: User receives email, awaits confirmation
│   │   │   └── FAIL: Email send failure
│   │   │       └── ACTION: Log error, user still created (manual confirm option)
│   │   └── FAIL: Local DB user creation fails
│   │       └── ACTION: Rollback Supabase user, show error
│   └── FAIL: Supabase user creation fails
│       ├── Email already exists → Show "Account exists" message
│       ├── Password too weak → Show password requirements
│       └── Network error → Show "Try again later"
├── Invalid Email Format
│   └── FAIL: Frontend validation → Show format error
└── Invalid Password (too short/weak)
    └── FAIL: Frontend validation → Show password requirements

### 2. EMAIL CONFIRMATION FLOW TEST  
Email Confirmation Link Clicked
├── Valid Token & Email
│   ├── SUCCESS: Supabase confirms email
│   │   ├── SUCCESS: Local user marked as verified
│   │   │   └── RESULT: User can now log in
│   │   └── FAIL: Local user update fails
│   │       └── ACTION: Log error, Supabase still confirmed (user can login)
│   └── FAIL: Supabase confirmation fails
│       ├── Token expired → Show "Request new confirmation email"
│       ├── Token invalid → Show "Invalid confirmation link"
│       └── Network error → Show "Try again later"
├── Invalid Token
│   └── FAIL: Show "Invalid or expired confirmation link"
└── Token Already Used
    └── SUCCESS: Show "Email already confirmed, please login"

### 3. LOGIN FLOW TEST
Login Attempt
├── Verified User + Correct Credentials
│   ├── SUCCESS: Supabase authentication
│   │   ├── SUCCESS: Local user lookup
│   │   │   ├── SUCCESS: Tokens stored securely
│   │   │   │   └── RESULT: User logged in, redirect to dashboard
│   │   │   └── FAIL: Token storage fails
│   │   │       └── ACTION: Retry login, clear auth state
│   │   └── FAIL: Local user not found
│   │       └── ACTION: Auto-provision local user from Supabase data
│   └── FAIL: Supabase authentication fails
│       ├── Incorrect password → Show "Invalid credentials"
│       ├── User not found → Show "Invalid credentials" (no user enumeration)
│       └── Network error → Show "Login failed, try again"
├── Unverified User + Correct Credentials  
│   ├── Supabase allows login (email not confirmed)
│   │   └── BLOCK: Check is_verified in local DB → Show "Please confirm your email"
│   └── Supabase blocks login (email not confirmed)
│       └── RESULT: Show "Please confirm your email first"
├── Invalid Credentials
│   └── FAIL: Show "Invalid email or password"
└── Empty Fields
    └── FAIL: Frontend validation → Show "Please fill all fields"

### 4. TOKEN REFRESH FLOW TEST
API Request with Expired Access Token
├── Valid Refresh Token
│   ├── SUCCESS: Supabase token refresh
│   │   ├── SUCCESS: New tokens stored
│   │   │   ├── SUCCESS: Original API request retried
│   │   │   │   └── RESULT: Seamless user experience
│   │   │   └── FAIL: Original request still fails
│   │   │       └── ACTION: Show specific API error
│   │   └── FAIL: Token storage fails
│   │       └── ACTION: Force logout, redirect to login
│   └── FAIL: Supabase refresh fails
│       ├── Refresh token expired → Force logout
│       ├── Refresh token invalid → Force logout  
│       └── Network error → Retry once, then force logout
├── Invalid/Missing Refresh Token
│   └── FAIL: Force logout, redirect to login
└── Both Tokens Expired
    └── FAIL: Force logout, clear all auth state

### 5. LOGOUT FLOW TEST
User Initiates Logout
├── SUCCESS: Supabase session invalidation
│   ├── SUCCESS: Local token cleanup
│   │   ├── SUCCESS: Auth state cleared
│   │   │   └── RESULT: User logged out, redirect to login
│   │   └── FAIL: State cleanup incomplete
│   │       └── ACTION: Force state reset, redirect anyway
│   └── FAIL: Local cleanup fails
│       └── ACTION: Continue logout process (server-side invalidated)
├── FAIL: Supabase logout fails
│   ├── Network error → Continue with local cleanup
│   └── Invalid session → Continue with local cleanup (already logged out)
└── User Already Logged Out
    └── RESULT: No action needed, redirect to login

### 6. SESSION PERSISTENCE TEST
App Restart/Page Reload
├── Valid Stored Tokens
│   ├── Access token valid
│   │   ├── SUCCESS: Auto-login with current tokens
│   │   │   └── RESULT: User stays logged in
│   │   └── FAIL: Token validation fails
│   │       └── ACTION: Try refresh token
│   └── Access token expired, refresh token valid
│       ├── SUCCESS: Token refresh on startup
│       │   └── RESULT: User stays logged in with new tokens
│       └── FAIL: Refresh fails
│           └── ACTION: Force login screen
├── Invalid/Expired Tokens
│   └── RESULT: Clear auth state, show login screen
└── No Stored Tokens
    └── RESULT: Show login screen

### 7. CONCURRENT SESSIONS TEST
Multiple Browser Tabs/Windows
├── Login in Tab 1
│   ├── SUCCESS: Both tabs should sync auth state
│   │   └── RESULT: Tab 2 also shows logged-in state
│   └── FAIL: Tab 2 doesn't sync
│       └── ACTION: Implement auth state broadcasting
├── Logout in Tab 2
│   ├── SUCCESS: Tab 1 should also logout
│   │   └── RESULT: Consistent auth state across tabs
│   └── FAIL: Tab 1 stays logged in
│       └── ACTION: Implement logout broadcasting
└── Token refresh in Tab 1
    ├── SUCCESS: Tab 2 gets new tokens
    │   └── RESULT: No duplicate refresh requests
    └── FAIL: Tab 2 still has old tokens
        └── ACTION: Sync token storage across tabs

### 8. ERROR RECOVERY TEST
Network/Server Errors During Auth
├── Registration during network outage
│   ├── Frontend queues request
│   │   └── SUCCESS: Retry when network returns
│   └── Show error with retry option
├── Login timeout
│   ├── Retry automatically once
│   │   ├── SUCCESS: Complete login
│   │   └── FAIL: Show "Login timeout, please try again"
│   └── User retry succeeds
├── Token refresh during network outage
│   ├── Queue refresh for retry
│   │   ├── SUCCESS: Complete when network returns
│   │   └── FAIL: Force logout if retry fails
│   └── Show "Connection issues" but keep user logged in temporarily
└── Supabase service unavailable
    ├── Backend health check fails
    │   └── Show "Authentication service temporarily unavailable"
    └── Graceful degradation with cached auth state

## Bash Script Implementation Strategy

### Script Structure
```bash
#!/bin/bash
# test_auth_flow.sh

# Test Configuration
API_BASE="http://localhost:8000/api"
FRONTEND_BASE="http://localhost:3000"
SUPABASE_URL="your-supabase-url"
TEST_EMAIL="test@example.com"
TEST_PASSWORD="TestPass123!"

# Helper Functions
test_registration() { ... }
test_login() { ... }
test_token_refresh() { ... }
test_logout() { ... }
validate_response() { ... }
cleanup_test_data() { ... }

# Test Execution
run_test_suite() {
    echo "=== Starting Authentication Test Suite ==="
    
    # Test 1: Registration
    test_registration || exit 1
    
    # Test 2: Email confirmation (manual step)
    echo "Please confirm email manually and press Enter"
    read -r
    
    # Test 3: Login
    test_login || exit 1
    
    # Test 4: Token operations
    test_token_refresh || exit 1
    
    # Test 5: Logout
    test_logout || exit 1
    
    echo "=== All Tests Passed ==="
}
```

### Test Data Management
- Create temporary test users
- Clean up after each test run
- Use deterministic test data
- Validate database state before/after tests

### Success/Failure Criteria
- HTTP status codes (200, 401, 400, etc.)
- Response body structure validation
- Database state verification
- Frontend state consistency checks
- Token validity and expiration handling

## Manual Testing Checklist

### Frontend UI Tests
- [ ] Registration form validation
- [ ] Login form validation  
- [ ] Loading states during auth operations
- [ ] Error message display
- [ ] Success message display
- [ ] Redirect behavior after auth
- [ ] Protected route access control
- [ ] Navigation auth state updates

### Backend API Tests  
- [ ] All auth endpoints return correct status codes
- [ ] Response bodies match expected schemas
- [ ] Database operations complete successfully
- [ ] Proper error handling and logging
- [ ] Rate limiting works correctly
- [ ] CORS headers set properly

### Integration Tests
- [ ] Frontend + Backend auth flow end-to-end
- [ ] Token refresh works seamlessly
- [ ] Session persistence across page reloads
- [ ] Multi-tab auth state synchronization
- [ ] Mobile responsiveness of auth forms
- [ ] Accessibility of auth components

### Performance Tests
- [ ] Auth operations complete within acceptable time
- [ ] No memory leaks during auth operations
- [ ] Concurrent user registrations
- [ ] Token refresh under load
- [ ] Database query performance for user lookups

This comprehensive test strategy ensures robust validation of the Supabase-only authentication system migration.