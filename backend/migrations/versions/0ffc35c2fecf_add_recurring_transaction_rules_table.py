"""add_recurring_transaction_rules_table

Revision ID: 0ffc35c2fecf
Revises: add_plaid_account_fields
Create Date: 2025-08-12 11:15:35.412399

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0ffc35c2fecf'
down_revision: Union[str, None] = 'add_plaid_account_fields'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('recurring_transaction_rules',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('account_id', sa.UUID(), nullable=False),
    sa.Column('category_id', sa.UUID(), nullable=True),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('amount_cents', sa.BigInteger(), nullable=False),
    sa.Column('currency', sa.String(length=3), nullable=False),
    sa.Column('frequency', sa.Enum('WEEKLY', 'BIWEEKLY', 'MONTHLY', 'QUARTERLY', 'ANNUALLY', 'CUSTOM', name='frequencytype'), nullable=False),
    sa.Column('interval', sa.BigInteger(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.Column('next_due_date', sa.Date(), nullable=False),
    sa.Column('last_generated_date', sa.Date(), nullable=True),
    sa.Column('tolerance_cents', sa.BigInteger(), nullable=False),
    sa.Column('auto_categorize', sa.Boolean(), nullable=False),
    sa.Column('generate_notifications', sa.Boolean(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_confirmed', sa.Boolean(), nullable=False),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('detection_method', sa.String(length=50), nullable=True),
    sa.Column('sample_transactions', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('custom_rule', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('notification_settings', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('rule_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_matched_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], ),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_recurring_rule_account', 'recurring_transaction_rules', ['account_id'], unique=False)
    op.create_index('idx_recurring_rule_active', 'recurring_transaction_rules', ['is_active', 'is_confirmed'], unique=False)
    op.create_index('idx_recurring_rule_frequency', 'recurring_transaction_rules', ['frequency'], unique=False)
    op.create_index('idx_recurring_rule_next_due', 'recurring_transaction_rules', ['next_due_date'], unique=False)
    op.create_index('idx_recurring_rule_user', 'recurring_transaction_rules', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_recurring_rule_user', table_name='recurring_transaction_rules')
    op.drop_index('idx_recurring_rule_next_due', table_name='recurring_transaction_rules')
    op.drop_index('idx_recurring_rule_frequency', table_name='recurring_transaction_rules')
    op.drop_index('idx_recurring_rule_active', table_name='recurring_transaction_rules')
    op.drop_index('idx_recurring_rule_account', table_name='recurring_transaction_rules')
    op.drop_table('recurring_transaction_rules')
    # ### end Alembic commands ###
