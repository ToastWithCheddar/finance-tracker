"""Create initial database schema

Revision ID: 93f7829207e8
Revises: 
Create Date: 2025-08-05 18:01:14.189776

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '93f7829207e8'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Import required types
    from sqlalchemy.dialects.postgresql import UUID, JSONB, ARRAY
    
    # Create users table
    op.create_table('users',
        sa.Column('id', UUID(as_uuid=True), primary_key=True),
        sa.Column('supabase_user_id', UUID(as_uuid=True), nullable=False, unique=True, index=True),
        sa.Column('email', sa.String(255), nullable=False, unique=True, index=True),
        sa.Column('first_name', sa.String(50), nullable=True),
        sa.Column('last_name', sa.String(50), nullable=True),
        sa.Column('display_name', sa.String(100), nullable=True),
        sa.Column('avatar_url', sa.String(500), nullable=True),
        sa.Column('locale', sa.String(10), nullable=False, default='en-US'),
        sa.Column('timezone', sa.String(50), nullable=False, default='UTC'),
        sa.Column('currency', sa.String(3), nullable=False, default='USD'),
        sa.Column('is_active', sa.Boolean, nullable=False, default=True),
        sa.Column('is_verified', sa.Boolean, nullable=False, default=False),
        sa.Column('notification_email', sa.Boolean, nullable=False, default=True),
        sa.Column('notification_push', sa.Boolean, nullable=False, default=True),
        sa.Column('theme', sa.String(20), nullable=False, default='light'),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, server_default=sa.text('now()')),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True, server_default=sa.text('now()')),
    )
    
    # Create indexes for users
    op.create_index('idx_user_email_active', 'users', ['email', 'is_active'])
    op.create_index('idx_user_supabase_id', 'users', ['supabase_user_id'])
    
    # Create user_preferences table
    op.create_table('user_preferences',
        sa.Column('id', UUID(as_uuid=True), primary_key=True),
        sa.Column('user_id', UUID(as_uuid=True), sa.ForeignKey('users.id'), nullable=False, unique=True),
        sa.Column('currency', sa.String(3), nullable=False, default='USD'),
        sa.Column('date_format', sa.String(20), nullable=False, default='MM/DD/YYYY'),
        sa.Column('number_format', sa.String(20), nullable=False, default='en-US'),
        sa.Column('theme', sa.String(10), nullable=False, default='light'),
        sa.Column('email_notifications', sa.Boolean, nullable=False, default=True),
        sa.Column('push_notifications', sa.Boolean, nullable=False, default=True),
        sa.Column('transaction_reminders', sa.Boolean, nullable=False, default=False),
        sa.Column('budget_alerts', sa.Boolean, nullable=False, default=True),
        sa.Column('weekly_reports', sa.Boolean, nullable=False, default=False),
        sa.Column('monthly_reports', sa.Boolean, nullable=False, default=True),
        sa.Column('data_sharing', sa.Boolean, nullable=False, default=False),
        sa.Column('analytics_tracking', sa.Boolean, nullable=False, default=True),
        sa.Column('default_account_type', sa.String(50), nullable=False, default='checking'),
        sa.Column('budget_warning_threshold', sa.Float, nullable=False, default=0.8),
        sa.Column('low_balance_threshold', sa.Float, nullable=False, default=100.0),
        sa.Column('auto_backup', sa.Boolean, nullable=False, default=True),
        sa.Column('backup_frequency', sa.String(20), nullable=False, default='weekly'),
        sa.Column('startup_page', sa.String(50), nullable=False, default='dashboard'),
        sa.Column('items_per_page', sa.Integer, nullable=False, default=25),
        sa.Column('auto_categorize', sa.Boolean, nullable=False, default=True),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, server_default=sa.text('now()')),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True, server_default=sa.text('now()')),
    )
    
    # Create accounts table
    op.create_table('accounts',
        sa.Column('id', UUID(as_uuid=True), primary_key=True),
        sa.Column('user_id', UUID(as_uuid=True), sa.ForeignKey('users.id'), nullable=False),
        sa.Column('name', sa.String(200), nullable=False),
        sa.Column('account_type', sa.String(50), nullable=False),
        sa.Column('balance_cents', sa.BigInteger, default=0),
        sa.Column('currency', sa.String(3), default='USD'),
        sa.Column('is_active', sa.Boolean, default=True),
        sa.Column('plaid_account_id', sa.String(100), unique=True, nullable=True),
        sa.Column('plaid_access_token', sa.Text, nullable=True),
        sa.Column('plaid_item_id', sa.String(100), nullable=True),
        sa.Column('last_sync_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('account_metadata', JSONB, nullable=True),
        sa.Column('sync_status', sa.String(20), default='manual'),
        sa.Column('last_sync_error', sa.Text, nullable=True),
        sa.Column('connection_health', sa.String(20), default='unknown'),
        sa.Column('sync_frequency', sa.String(20), default='manual'),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, server_default=sa.text('now()')),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True, server_default=sa.text('now()')),
    )
    
    # Create categories table
    op.create_table('categories',
        sa.Column('id', UUID(as_uuid=True), primary_key=True),
        sa.Column('user_id', UUID(as_uuid=True), sa.ForeignKey('users.id'), nullable=True),
        sa.Column('name', sa.String(100), nullable=False),
        sa.Column('description', sa.String(500), nullable=True),
        sa.Column('emoji', sa.String(10), nullable=True),
        sa.Column('color', sa.String(7), nullable=True),
        sa.Column('icon', sa.String(50), nullable=True),
        sa.Column('parent_id', UUID(as_uuid=True), sa.ForeignKey('categories.id'), nullable=True),
        sa.Column('is_system', sa.Boolean, nullable=False, default=False),
        sa.Column('is_active', sa.Boolean, nullable=False, default=True),
        sa.Column('sort_order', sa.Integer, nullable=False, default=0),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, server_default=sa.text('now()')),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True, server_default=sa.text('now()')),
    )
    
    # Create indexes for categories
    op.create_index('idx_category_user_name', 'categories', ['user_id', 'name'])
    op.create_index('idx_category_system', 'categories', ['is_system'])
    op.create_index('idx_category_parent', 'categories', ['parent_id'])
    op.create_unique_constraint('uq_user_category_name', 'categories', ['user_id', 'name'])
    
    # Create transactions table
    op.create_table('transactions',
        sa.Column('id', UUID(as_uuid=True), primary_key=True),
        sa.Column('user_id', UUID(as_uuid=True), sa.ForeignKey('users.id'), nullable=False),
        sa.Column('account_id', UUID(as_uuid=True), sa.ForeignKey('accounts.id'), nullable=False),
        sa.Column('category_id', UUID(as_uuid=True), sa.ForeignKey('categories.id'), nullable=True),
        sa.Column('amount_cents', sa.BigInteger, nullable=False),
        sa.Column('currency', sa.String(3), nullable=False, default='USD'),
        sa.Column('description', sa.Text, nullable=False),
        sa.Column('merchant', sa.String(200), nullable=True),
        sa.Column('merchant_logo', sa.Text, nullable=True),
        sa.Column('transaction_date', sa.Date, nullable=False),
        sa.Column('authorized_date', sa.Date, nullable=True),
        sa.Column('posted_date', sa.Date, nullable=True),
        sa.Column('status', sa.String(20), nullable=False, default='posted'),
        sa.Column('is_recurring', sa.Boolean, nullable=False, default=False),
        sa.Column('is_transfer', sa.Boolean, nullable=False, default=False),
        sa.Column('is_hidden', sa.Boolean, nullable=False, default=False),
        sa.Column('recurring_rule', JSONB, nullable=True),
        sa.Column('recurring_parent_id', UUID(as_uuid=True), sa.ForeignKey('transactions.id'), nullable=True),
        sa.Column('location', JSONB, nullable=True),
        sa.Column('notes', sa.Text, nullable=True),
        sa.Column('tags', ARRAY(sa.String), nullable=True),
        sa.Column('plaid_transaction_id', sa.String(100), unique=True, nullable=True),
        sa.Column('plaid_category', ARRAY(sa.String), nullable=True),
        sa.Column('confidence_score', sa.Float, nullable=True),
        sa.Column('ml_suggested_category_id', UUID(as_uuid=True), sa.ForeignKey('categories.id'), nullable=True),
        sa.Column('metadata', JSONB, nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, server_default=sa.text('now()')),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True, server_default=sa.text('now()')),
    )
    
    # Create indexes for transactions
    op.create_index('idx_transaction_user_date', 'transactions', ['user_id', 'transaction_date'])
    op.create_index('idx_transaction_account_date', 'transactions', ['account_id', 'transaction_date'])
    op.create_index('idx_transaction_category', 'transactions', ['category_id'])
    op.create_index('idx_transaction_merchant', 'transactions', ['merchant'])
    op.create_index('idx_transaction_amount', 'transactions', ['amount_cents'])
    op.create_index('idx_transaction_status', 'transactions', ['status'])
    op.create_index('idx_transaction_plaid_id', 'transactions', ['plaid_transaction_id'])
    op.create_index('idx_transaction_recurring', 'transactions', ['is_recurring'])
    
    # Create budgets table
    op.create_table('budgets',
        sa.Column('id', UUID(as_uuid=True), primary_key=True),
        sa.Column('user_id', UUID(as_uuid=True), sa.ForeignKey('users.id'), nullable=False),
        sa.Column('category_id', UUID(as_uuid=True), sa.ForeignKey('categories.id'), nullable=True),
        sa.Column('name', sa.String(100), nullable=False),
        sa.Column('amount_cents', sa.BigInteger, nullable=False),
        sa.Column('period', sa.String(20), nullable=False),
        sa.Column('start_date', sa.Date, nullable=False),
        sa.Column('end_date', sa.Date, nullable=True),
        sa.Column('alert_threshold', sa.Float, default=0.8),
        sa.Column('is_active', sa.Boolean, default=True),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, server_default=sa.text('now()')),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True, server_default=sa.text('now()')),
    )
    
    # Create goals table
    op.create_table('goals',
        sa.Column('id', UUID(as_uuid=True), primary_key=True),
        sa.Column('user_id', UUID(as_uuid=True), sa.ForeignKey('users.id'), nullable=False),
        sa.Column('name', sa.String(100), nullable=False),
        sa.Column('description', sa.Text, nullable=True),
        sa.Column('target_amount_cents', sa.BigInteger, nullable=False),
        sa.Column('current_amount_cents', sa.BigInteger, nullable=False, default=0),
        sa.Column('goal_type', sa.String(20), nullable=False),
        sa.Column('priority', sa.String(20), nullable=False, default='medium'),
        sa.Column('status', sa.String(20), nullable=False, default='active'),
        sa.Column('start_date', sa.Date, nullable=True),
        sa.Column('target_date', sa.Date, nullable=True),
        sa.Column('completed_date', sa.Date, nullable=True),
        sa.Column('auto_contribute', sa.Boolean, nullable=False, default=False),
        sa.Column('auto_contribution_amount', sa.BigInteger, nullable=True),
        sa.Column('auto_contribution_source', sa.String(100), nullable=True),
        sa.Column('last_contribution_date', sa.Date, nullable=True),
        sa.Column('contribution_frequency', sa.String(20), nullable=False, default='weekly'),
        sa.Column('monthly_target_cents', sa.BigInteger, nullable=True),
        sa.Column('celebration_message', sa.Text, nullable=True),
        sa.Column('milestone_percent', sa.Integer, nullable=True, default=25),
        sa.Column('last_milestone', sa.Integer, nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, server_default=sa.text('now()')),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True, server_default=sa.text('now()')),
    )
    
    # Create goal_contributions table
    op.create_table('goal_contributions',
        sa.Column('id', UUID(as_uuid=True), primary_key=True),
        sa.Column('goal_id', UUID(as_uuid=True), sa.ForeignKey('goals.id'), nullable=False),
        sa.Column('amount_cents', sa.BigInteger, nullable=False),
        sa.Column('contribution_date', sa.Date, nullable=False),
        sa.Column('transaction_id', UUID(as_uuid=True), sa.ForeignKey('transactions.id'), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, server_default=sa.text('now()')),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True, server_default=sa.text('now()')),
    )
    
    # Create goal_milestones table
    op.create_table('goal_milestones',
        sa.Column('id', UUID(as_uuid=True), primary_key=True),
        sa.Column('goal_id', UUID(as_uuid=True), sa.ForeignKey('goals.id'), nullable=False),
        sa.Column('percentage', sa.Integer, nullable=False),
        sa.Column('amount_reached_cents', sa.BigInteger, nullable=False),
        sa.Column('reached_date', sa.Date, nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, server_default=sa.text('now()')),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True, server_default=sa.text('now()')),
    )
    
    # Create insights table
    op.create_table('insights',
        sa.Column('id', UUID(as_uuid=True), primary_key=True),
        sa.Column('user_id', UUID(as_uuid=True), sa.ForeignKey('users.id'), nullable=False),
        sa.Column('transaction_id', UUID(as_uuid=True), sa.ForeignKey('transactions.id'), nullable=True),
        sa.Column('type', sa.String(50), nullable=False),
        sa.Column('title', sa.String(200), nullable=False),
        sa.Column('description', sa.Text, nullable=False),
        sa.Column('priority', sa.Integer, nullable=False, default=1),
        sa.Column('is_read', sa.Boolean, nullable=False, default=False),
        sa.Column('metadata', JSONB, nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, server_default=sa.text('now()')),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True, server_default=sa.text('now()')),
    )
    
    # Create ml_model_performance table
    op.create_table('ml_model_performance',
        sa.Column('id', UUID(as_uuid=True), primary_key=True),
        sa.Column('model_name', sa.String(100), nullable=False),
        sa.Column('version', sa.String(20), nullable=False),
        sa.Column('accuracy', sa.Float, nullable=True),
        sa.Column('precision', sa.Float, nullable=True),
        sa.Column('recall', sa.Float, nullable=True),
        sa.Column('f1_score', sa.Float, nullable=True),
        sa.Column('training_data_size', sa.Integer, nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, server_default=sa.text('now()')),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True, server_default=sa.text('now()')),
    )
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Drop tables in reverse order (to handle foreign key constraints)
    op.drop_table('ml_model_performance')
    op.drop_table('insights')
    op.drop_table('goal_milestones')
    op.drop_table('goal_contributions')
    op.drop_table('goals')
    op.drop_table('budgets')
    
    # Drop indexes first, then the table
    op.drop_index('idx_transaction_recurring', 'transactions')
    op.drop_index('idx_transaction_plaid_id', 'transactions')
    op.drop_index('idx_transaction_status', 'transactions')
    op.drop_index('idx_transaction_amount', 'transactions')
    op.drop_index('idx_transaction_merchant', 'transactions')
    op.drop_index('idx_transaction_category', 'transactions')
    op.drop_index('idx_transaction_account_date', 'transactions')
    op.drop_index('idx_transaction_user_date', 'transactions')
    op.drop_table('transactions')
    
    # Drop categories with constraints and indexes
    op.drop_constraint('uq_user_category_name', 'categories', type_='unique')
    op.drop_index('idx_category_parent', 'categories')
    op.drop_index('idx_category_system', 'categories')
    op.drop_index('idx_category_user_name', 'categories')
    op.drop_table('categories')
    
    op.drop_table('accounts')
    op.drop_table('user_preferences')
    
    # Drop user indexes
    op.drop_index('idx_user_supabase_id', 'users')
    op.drop_index('idx_user_email_active', 'users')
    op.drop_table('users')
    
    # ### end Alembic commands ###
